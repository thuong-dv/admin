<?php

function cus_payment_init() {
  global $user;
  //if($user->uid == 138) print_r(variable_get('payment_status')); die();
}


function cus_payment_menu() {
  
  $items['cus-payment/ipn'] = array(
      'page callback'     => 'cus_payment_paypal_api_ipn',
      'access callback'	=> true,
      'type' => MENU_CALLBACK,     
  );
  $items['admin/config/user-interface/paypal'] = array(
    'title' => 'Paypal Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cus_payment_paypal_setting_form'),
    'access arguments' => array('administer users')
  );  
  return $items;
}


function cus_payment_paypal_setting_form($form, &$form_state)
{
  
  $form['cus_payment_business_mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Paypal Business E-Mail'),
    '#default_value' => variable_get('cus_payment_business_mail', 'nhinq-facilitator@cesoftvn.com'),
    '#description' => t('May enter the value for Paypal business mail.'),
    '#required' => TRUE
  );
  $form['cus_payment_paypals'] = array(
    '#type' => 'radios',
    '#title' => t('Paypal'),
    '#options' => array(
      'sandbox' => 'Sandbox',
      'live' => 'Live'
    ),
    '#default_value' => variable_get('cus_payment_paypals', 'sandbox'),
  );

  return system_settings_form($form);
}

function cus_payment_paypal_api_ipn() { 
  
  global $user; $account = user_load($user->uid);
  if (!cus_paypal_api_ipn_validate()) {
     /// return FALSE;
  }
  if(empty($_POST['payment_status'])){
   drupal_set_message("IPN URL accessed with no POST data submitted.", 'warning');
   return FALSE;
  }
 
  if (isset($_POST['payment_status']) && !in_array($_POST['payment_status'], array('Failed', 'Voided', 'Pending', 'Completed', 'Refunded'))) {
    drupal_set_message("Invalid IPN received and ignored.", 'warning');
    return FALSE;
  }  
 
  if (isset($_POST['payment_status']) && $_POST['payment_status'] == 'Completed'){
  //print_r($_POST);die();
 $payment_date = $_POST['payment_date'];
 $custom = $_POST['custom'];

    $value = !empty($_POST['item_number']) ? $_POST['item_number'] : NULL;
    $time_validity =  cus_payment_time_validity($value);
    
    drupal_set_message(t('Thank-you for joining Miltonvillager.  Your membership is now active!'));   
    
    $field_paid_photos_arr = db_select('field_data_field_paid_photos', 'p')
    ->fields('p', array('field_paid_photos_nid', 'delta'))
    ->condition('entity_id', $user->uid)
    ->execute();

    $new_photos= array();
     while($record = $field_paid_photos_arr->fetchAssoc()) {
        $new_photos[] = $record['field_paid_photos_nid'];
     }

     
     
     
        $account = user_load($user->uid);     
        $edit_u = array();   
        $edit_u['roles']['6'] = 'Membership';
         array_push($new_photos, $custom);
  //print_r($new_photos);die();
        foreach($new_photos as $k => $nid){
           $edit_u['field_paid_photos'][LANGUAGE_NONE][$k]['nid'] = $nid;
        }
    
    
    $up = user_save($account, $edit_u);
    $edit_u = '';
    $mail = cus_payment_mail_send(t('Successfully'), 'Thank-you for joining Miltonvillager.  Your membership is now active!', $user->mail);
   if($up) drupal_goto('user');
   
  }
  drupal_goto('<front>');
}

function cus_payment_time_validity($value) {
    $query = db_select('field_data_field_subscription_time', 'e');
    $query->join("field_data_field_item_number", "i", "i.entity_id = e.entity_id");
    $query->fields("e", array("entity_id", "field_subscription_time_interval"));    
    $query->condition("i.field_item_number_value", $value);
    $subscription = $query->execute()->fetchObject();
    $month_interval = $subscription->field_subscription_time_interval;
    $time_validity = time() + $month_interval * 4 * 7 * 24 * 3600;
    
    return $time_validity;
}       

function cus_payment_mail_send($subject, $body, $mail_to) {
       $params = array('body' => $body, 'subject' => $subject);   
       return drupal_mail('cus_payment', 'cus_payment_mail', $mail_to, NULL, $params, variable_get('site_mail', 'nhinq-facilitator@cesoftvn.com')); 
}       

function cus_payment_mail($key, &$message, $params) {
    switch($key) {
      case 'cus_payment_mail':
        $message['subject'] = isset($params['subject']) ? $params['subject']:NULL;
        $message['body'][] = isset($params['body']) ? $params['body']:NULL;
        if (isset($params['headers']) && is_array($params['headers'])) {
                $message['headers'] += $params['headers'];
        }
        break;
    }
}

 /**************************Submit Payment for have registed paypal **********************************/
function cus_payment_billing_form_submit($form, &$form_state) {
 
  global $base_url, $user;
  $values = $form_state['values'];
 _cus_payment_billing_updates_callback($values);
 
  $nid = $form_state['values']['node_nid'];
  
  $tit = db_select('node', 'n')
        ->condition('type', 'photos')
        ->condition('nid', $nid)
        ->fields('n', array('title'))->execute()->fetchField();
  $amount = db_select('field_data_field_price', 'h')
    ->fields('h', array('field_price_value'))
    ->condition('entity_id', $nid,'=')
    ->execute()->fetchField();
  /*$item_code = db_select('field_data_field_item_number', 'i')
    ->fields('i', array('field_item_number_value'))
    ->condition('entity_id', $nid,'=')
    ->execute()->fetchField();*/
    $item_code = 1;
        
 // $hosted_button_id = _get_paypal_hosted_id($nid);
  if($amount && $item_code){
  $paypal = array();
  //$paypal['cmd'] = '_s-xclick';
  //$paypal['hosted_button_id'] = $hosted_button_id;
  $paypal['business'] = variable_get('cus_payment_business_mail', 'nhinq-facilitator@cesoftvn.com');
  $paypal['currency_code'] = 'USD';
  $paypal['cmd'] = '_xclick';
  $paypal['amount'] = $amount;
  $paypal['item_name'] = $tit;
  $paypal['item_id'] = $nid;
  $paypal['custom'] = $nid;
  $paypal['item_number'] = $item_code;
  $paypal['quantity'] = 1;
  $paypal['return'] = $base_url.'/cus-payment/ipn';
  $paypal['notify_url'] = $base_url.'/cus-payment/ipn';
  $paypal['cancel_return'] = $base_url.'/payment/'.$nid;    
  
  $query = http_build_query($paypal, '', '&');
  $url = 'https:///';
  $url .= cus_paypal_api_url();
  $url .= '?' . $query;
 } 
 $form_state['redirect'] = $url;

}

/**
 *
 * Validate a PayPal IPN signal.
 *
 * Code from their example script.
 *
 * @return
 * TRUE if this is a valid message.
 */
function cus_paypal_api_ipn_validate() {
  $req = 'cmd=_notify-validate';

  foreach ($_POST as $key => $value) {
  	$req .= "&$key=" .  urlencode(stripslashes($value));
  }

  // get back to PayPal to validate
  $paypal_url = cus_paypal_api_url(FALSE);
  $header = "POST /cgi-bin/webscr HTTP/1.0\r\n";
  $header .= "Content-Type: application/x-www-form-urlencoded\r\n";
  $header .= "Content-Length: " . strlen($req) . "\r\n\r\n";
  $fp = fsockopen ('ssl://' . $paypal_url, 443, $errno, $errstr, 30);

  if (!$fp) {
    // HTTP error
    // @TODO: handle HTTP errors during verification
    return FALSE;
  }

  $validated = FALSE;

  fputs($fp, $header . $req);
  while (!feof($fp)) {
  	$res = fgets ($fp, 1024);
  	if (strcmp ($res, "VERIFIED") == 0) {
  	  $validated = TRUE;
  	}
  	else if (strcmp ($res, "INVALID") == 0) {
  	  watchdog('cus_payment', t("Invalid PayPal IPN message recieved"), $_POST);
  	}
  }
  fclose ($fp);

  return $validated;
}

function cus_paypal_api_url($add_path = TRUE) {
  $settings = variable_get('cus_payment_paypals', 'sandbox');

  $url = "www.";
  if (isset($settings) && $settings == 'sandbox') {
    $url .= "sandbox.";
  }
  $url .= "paypal.com";

  if ($add_path) {
    $url .= "/cgi-bin/webscr";
  }

  return $url;
}

function _get_paypal_hosted_id($nid){
 
     $hosted_button_id = db_select('field_data_field_ipn', 'h')
    ->fields('h', array('field_ipn_value'))
    ->condition('entity_id', $nid,'=')
    ->execute()->fetchField();
    return $hosted_button_id;
}

function _cus_payment_billing_updates_callback($values) {
  global $user; $account = user_load($user->uid);

  $edit = array(
      'field_first_name' => array(LANGUAGE_NONE => array(array('value' => $values['field_first_name']))),
      'field_last_name' => array(LANGUAGE_NONE => array(array('value' => $values['field_last_name']))),
      'field_country' => array(LANGUAGE_NONE => array(array('value' => $values['field_country']))),
      'field_address_1' => array(LANGUAGE_NONE => array(array('value' => $values['field_address_1']))),
      'field_address_2' => array(LANGUAGE_NONE => array(array('value' => $values['field_address_2']))),
      'field_city' => array(LANGUAGE_NONE => array(array('value' => $values['field_city']))),
      'field_state' => array(LANGUAGE_NONE => array(array('value' => $values['field_state']))),
      'field_zip_code' => array(LANGUAGE_NONE => array(array('value' => $values['field_zip_code']))),
    );
  user_save($account, $edit);
 
}

function cus_payment_billing_form($form, &$form_state) {
  global $user, $base_url; $account = user_load($user->uid);

  if(arg(0) == 'payment' && is_numeric(arg(1))){
    $_SESSION['nid'] = intval(arg(1));
  }

 
  $form['field_first_name'] = array(
    '#type' => 'textfield',
    '#title' => t('First name'),
    '#default_value' => !empty($account->	field_first_name['und'][0]['value'])?$account->	field_first_name['und'][0]['value']:null,
    '#required' => TRUE,
  );  
  $form['field_last_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Last Name'),
    '#default_value' => !empty($account->field_last_name['und'][0]['value'])?$account->field_last_name['und'][0]['value']:null,
    '#required' => TRUE,
  );
  $form['field_country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#options' => _cus_payment_get_predefined_list(),
    '#default_value' => !empty($account->field_country['und'][0]['value'])?$account->field_country['und'][0]['value']:'US',
    '#required' => TRUE,
    /*'#ajax' => array(
          'callback' => array('state_list_callback'),
          'wrapper' => 'state_list_callback',
       ),*/
  );
  $form['field_address_1'] = array(
    '#type' => 'textfield',
    '#title' => t('Address 1'),
    '#default_value' => !empty($account->field_address_1['und'][0]['value'])?$account->field_address_1['und'][0]['value']:null,
    '#required' => TRUE,
  );
  $form['field_address_2'] = array(
    '#type' => 'textfield',
    '#title' => t('Address 2'),
    '#default_value' => !empty($account->field_address_2['und'][0]['value'])?$account->field_address_2['und'][0]['value']:null,
    '#required' => FALSE,
  );
   $form['field_city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#default_value' => !empty($account->field_city['und'][0]['value'])?$account->field_city['und'][0]['value']:null,
    '#required' => TRUE,
  );
  $form['states'] = array(
    '#prefix' => '<div id="state_list_callback">',
    '#suffix' => '</div>',
  );
   $form['field_state'] = array(
    '#type' => 'textfield',
    '#title' => t('State'),
    '#default_value' => !empty($account->field_state['und'][0]['value'])?$account->field_state['und'][0]['value']:null,
    '#required' => TRUE,
  );
 /*
    $state = array();
    if(isset($form_state['values'])){
        $state = location_get_provinces($form_state['values']['field_country']);
    }*/
  /*$form['states']['field_state'] = array(
    '#type' => 'select',
    '#title' => t('State'),
    '#options' => $state,
    '#default_value' => !empty($account->field_state['und'][0]['value'])?$account->field_state['und'][0]['value']:null,
    '#required' => TRUE,
    
  );*/
   
  $form['field_zip_code'] = array(
    '#type' => 'textfield',
    '#title' => t('ZIP Code'),
    '#default_value' => !empty($account->field_zip_code['und'][0]['value'])?$account->field_zip_code['und'][0]['value']:null,
    '#required' => TRUE,
    
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Subscribe'),
   /* '#ajax' => array(
          'callback' => array('_cus_payment_billing_updates_callback'),
            )*/
  );
  $form['secure_payment'] = array(
    '#suffix' => '<div class="secure-payment"></div>',
  );
  $form['node_nid'] = array(
    '#type' => 'hidden',
    '#value' => $_SESSION['nid'],
  );
  return $form;
}
 

function state_list_callback($form, $form_state){
 return $form['states'];
}
function _cus_payment_get_predefined_list() {
  static $countries;

  if (isset($countries)) {
    return $countries;
  }
  $t = get_t();

  $countries = array(
    'AD' => $t('Andorra'),
    'AE' => $t('United Arab Emirates'),
    'AF' => $t('Afghanistan'),
    'AG' => $t('Antigua and Barbuda'),
    'AI' => $t('Anguilla'),
    'AL' => $t('Albania'),
    'AM' => $t('Armenia'),
    'AN' => $t('Netherlands Antilles'),
    'AO' => $t('Angola'),
    'AQ' => $t('Antarctica'),
    'AR' => $t('Argentina'),
    'AS' => $t('American Samoa'),
    'AT' => $t('Austria'),
    'AU' => $t('Australia'),
    'AW' => $t('Aruba'),
    'AX' => $t('Aland Islands'),
    'AZ' => $t('Azerbaijan'),
    'BA' => $t('Bosnia and Herzegovina'),
    'BB' => $t('Barbados'),
    'BD' => $t('Bangladesh'),
    'BE' => $t('Belgium'),
    'BF' => $t('Burkina Faso'),
    'BG' => $t('Bulgaria'),
    'BH' => $t('Bahrain'),
    'BI' => $t('Burundi'),
    'BJ' => $t('Benin'),
    'BL' => $t('Saint Barthélemy'),
    'BM' => $t('Bermuda'),
    'BN' => $t('Brunei'),
    'BO' => $t('Bolivia'),
    'BR' => $t('Brazil'),
    'BS' => $t('Bahamas'),
    'BT' => $t('Bhutan'),
    'BV' => $t('Bouvet Island'),
    'BW' => $t('Botswana'),
    'BY' => $t('Belarus'),
    'BZ' => $t('Belize'),
    'CA' => $t('Canada'),
    'CC' => $t('Cocos (Keeling) Islands'),
    'CD' => $t('Congo (Kinshasa)'),
    'CF' => $t('Central African Republic'),
    'CG' => $t('Congo (Brazzaville)'),
    'CH' => $t('Switzerland'),
    'CI' => $t('Ivory Coast'),
    'CK' => $t('Cook Islands'),
    'CL' => $t('Chile'),
    'CM' => $t('Cameroon'),
    'CN' => $t('China'),
    'CO' => $t('Colombia'),
    'CR' => $t('Costa Rica'),
    'CU' => $t('Cuba'),
    'CW' => $t('Curaçao'),
    'CV' => $t('Cape Verde'),
    'CX' => $t('Christmas Island'),
    'CY' => $t('Cyprus'),
    'CZ' => $t('Czech Republic'),
    'DE' => $t('Germany'),
    'DJ' => $t('Djibouti'),
    'DK' => $t('Denmark'),
    'DM' => $t('Dominica'),
    'DO' => $t('Dominican Republic'),
    'DZ' => $t('Algeria'),
    'EC' => $t('Ecuador'),
    'EE' => $t('Estonia'),
    'EG' => $t('Egypt'),
    'EH' => $t('Western Sahara'),
    'ER' => $t('Eritrea'),
    'ES' => $t('Spain'),
    'ET' => $t('Ethiopia'),
    'FI' => $t('Finland'),
    'FJ' => $t('Fiji'),
    'FK' => $t('Falkland Islands'),
    'FM' => $t('Micronesia'),
    'FO' => $t('Faroe Islands'),
    'FR' => $t('France'),
    'GA' => $t('Gabon'),
    'GB' => $t('United Kingdom'),
    'GD' => $t('Grenada'),
    'GE' => $t('Georgia'),
    'GF' => $t('French Guiana'),
    'GG' => $t('Guernsey'),
    'GH' => $t('Ghana'),
    'GI' => $t('Gibraltar'),
    'GL' => $t('Greenland'),
    'GM' => $t('Gambia'),
    'GN' => $t('Guinea'),
    'GP' => $t('Guadeloupe'),
    'GQ' => $t('Equatorial Guinea'),
    'GR' => $t('Greece'),
    'GS' => $t('South Georgia and the South Sandwich Islands'),
    'GT' => $t('Guatemala'),
    'GU' => $t('Guam'),
    'GW' => $t('Guinea-Bissau'),
    'GY' => $t('Guyana'),
    'HK' => $t('Hong Kong S.A.R., China'),
    'HM' => $t('Heard Island and McDonald Islands'),
    'HN' => $t('Honduras'),
    'HR' => $t('Croatia'),
    'HT' => $t('Haiti'),
    'HU' => $t('Hungary'),
    'ID' => $t('Indonesia'),
    'IE' => $t('Ireland'),
    'IL' => $t('Israel'),
    'IM' => $t('Isle of Man'),
    'IN' => $t('India'),
    'IO' => $t('British Indian Ocean Territory'),
    'IQ' => $t('Iraq'),
    'IR' => $t('Iran'),
    'IS' => $t('Iceland'),
    'IT' => $t('Italy'),
    'JE' => $t('Jersey'),
    'JM' => $t('Jamaica'),
    'JO' => $t('Jordan'),
    'JP' => $t('Japan'),
    'KE' => $t('Kenya'),
    'KG' => $t('Kyrgyzstan'),
    'KH' => $t('Cambodia'),
    'KI' => $t('Kiribati'),
    'KM' => $t('Comoros'),
    'KN' => $t('Saint Kitts and Nevis'),
    'KP' => $t('North Korea'),
    'KR' => $t('South Korea'),
    'KW' => $t('Kuwait'),
    'KY' => $t('Cayman Islands'),
    'KZ' => $t('Kazakhstan'),
    'LA' => $t('Laos'),
    'LB' => $t('Lebanon'),
    'LC' => $t('Saint Lucia'),
    'LI' => $t('Liechtenstein'),
    'LK' => $t('Sri Lanka'),
    'LR' => $t('Liberia'),
    'LS' => $t('Lesotho'),
    'LT' => $t('Lithuania'),
    'LU' => $t('Luxembourg'),
    'LV' => $t('Latvia'),
    'LY' => $t('Libya'),
    'MA' => $t('Morocco'),
    'MC' => $t('Monaco'),
    'MD' => $t('Moldova'),
    'ME' => $t('Montenegro'),
    'MF' => $t('Saint Martin (French part)'),
    'MG' => $t('Madagascar'),
    'MH' => $t('Marshall Islands'),
    'MK' => $t('Macedonia'),
    'ML' => $t('Mali'),
    'MM' => $t('Myanmar'),
    'MN' => $t('Mongolia'),
    'MO' => $t('Macao S.A.R., China'),
    'MP' => $t('Northern Mariana Islands'),
    'MQ' => $t('Martinique'),
    'MR' => $t('Mauritania'),
    'MS' => $t('Montserrat'),
    'MT' => $t('Malta'),
    'MU' => $t('Mauritius'),
    'MV' => $t('Maldives'),
    'MW' => $t('Malawi'),
    'MX' => $t('Mexico'),
    'MY' => $t('Malaysia'),
    'MZ' => $t('Mozambique'),
    'NA' => $t('Namibia'),
    'NC' => $t('New Caledonia'),
    'NE' => $t('Niger'),
    'NF' => $t('Norfolk Island'),
    'NG' => $t('Nigeria'),
    'NI' => $t('Nicaragua'),
    'NL' => $t('Netherlands'),
    'NO' => $t('Norway'),
    'NP' => $t('Nepal'),
    'NR' => $t('Nauru'),
    'NU' => $t('Niue'),
    'NZ' => $t('New Zealand'),
    'OM' => $t('Oman'),
    'PA' => $t('Panama'),
    'PE' => $t('Peru'),
    'PF' => $t('French Polynesia'),
    'PG' => $t('Papua New Guinea'),
    'PH' => $t('Philippines'),
    'PK' => $t('Pakistan'),
    'PL' => $t('Poland'),
    'PM' => $t('Saint Pierre and Miquelon'),
    'PN' => $t('Pitcairn'),
    'PR' => $t('Puerto Rico'),
    'PS' => $t('Palestinian Territory'),
    'PT' => $t('Portugal'),
    'PW' => $t('Palau'),
    'PY' => $t('Paraguay'),
    'QA' => $t('Qatar'),
    'RE' => $t('Reunion'),
    'RO' => $t('Romania'),
    'RS' => $t('Serbia'),
    'RU' => $t('Russia'),
    'RW' => $t('Rwanda'),
    'SA' => $t('Saudi Arabia'),
    'SB' => $t('Solomon Islands'),
    'SC' => $t('Seychelles'),
    'SD' => $t('Sudan'),
    'SE' => $t('Sweden'),
    'SG' => $t('Singapore'),
    'SH' => $t('Saint Helena'),
    'SI' => $t('Slovenia'),
    'SJ' => $t('Svalbard and Jan Mayen'),
    'SK' => $t('Slovakia'),
    'SL' => $t('Sierra Leone'),
    'SM' => $t('San Marino'),
    'SN' => $t('Senegal'),
    'SO' => $t('Somalia'),
    'SR' => $t('Suriname'),
    'ST' => $t('Sao Tome and Principe'),
    'SV' => $t('El Salvador'),
    'SY' => $t('Syria'),
    'SZ' => $t('Swaziland'),
    'TC' => $t('Turks and Caicos Islands'),
    'TD' => $t('Chad'),
    'TF' => $t('French Southern Territories'),
    'TG' => $t('Togo'),
    'TH' => $t('Thailand'),
    'TJ' => $t('Tajikistan'),
    'TK' => $t('Tokelau'),
    'TL' => $t('Timor-Leste'),
    'TM' => $t('Turkmenistan'),
    'TN' => $t('Tunisia'),
    'TO' => $t('Tonga'),
    'TR' => $t('Turkey'),
    'TT' => $t('Trinidad and Tobago'),
    'TV' => $t('Tuvalu'),
    'TW' => $t('Taiwan'),
    'TZ' => $t('Tanzania'),
    'UA' => $t('Ukraine'),
    'UG' => $t('Uganda'),
    'UM' => $t('United States Minor Outlying Islands'),
    'US' => $t('United States'),
    'UY' => $t('Uruguay'),
    'UZ' => $t('Uzbekistan'),
    'VA' => $t('Vatican'),
    'VC' => $t('Saint Vincent and the Grenadines'),
    'VE' => $t('Venezuela'),
    'VG' => $t('British Virgin Islands'),
    'VI' => $t('U.S. Virgin Islands'),
    'VN' => $t('Vietnam'),
    'VU' => $t('Vanuatu'),
    'WF' => $t('Wallis and Futuna'),
    'WS' => $t('Samoa'),
    'YE' => $t('Yemen'),
    'YT' => $t('Mayotte'),
    'ZA' => $t('South Africa'),
    'ZM' => $t('Zambia'),
    'ZW' => $t('Zimbabwe'),
  );

  // Sort the list.
  natcasesort($countries);

  return $countries;
}